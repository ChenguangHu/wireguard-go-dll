name: Build WireGuard-Go DLLs

on:
  release:
    types: [created]

jobs:
  build-x64:
    name: Build 64-bit DLL
    runs-on: windows-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          
      - name: Install mingw-w64
        run: |
          choco install mingw -y
          echo "C:\tools\mingw64\bin" >> $env:GITHUB_PATH
          
      - name: Build 64-bit DLL
        run: |
          $env:GOOS = "windows"
          $env:GOARCH = "amd64"
          $env:CGO_ENABLED = "1"
          $env:CC = "x86_64-w64-mingw32-gcc"
          go build -buildmode=c-shared -o wireguard-go-x64.dll .
          
      - name: Upload 64-bit DLL
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./wireguard-go-x64.dll
          asset_name: wireguard-go-x64.dll
          asset_content_type: application/octet-stream

  build-x86:
    name: Build 32-bit DLL
    runs-on: windows-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          
      - name: Install dependencies
        run: |
          choco install mingw -y
          choco install make -y
          choco install git -y
          
      - name: Build 32-bit DLL
        run: |
          $env:GOOS = "windows"
          $env:GOARCH = "386"
          $env:CGO_ENABLED = "1"
          $env:CC = "C:\tools\mingw64\i686-w64-mingw32\bin\i686-w64-mingw32-gcc.exe"
          $env:GO386 = "sse2"
          go build -buildmode=c-shared -o wireguard-go-x86.dll .
          
      - name: Upload 32-bit DLL
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./wireguard-go-x86.dll
          asset_name: wireguard-go-x86.dll
          asset_content_type: application/octet-stream
